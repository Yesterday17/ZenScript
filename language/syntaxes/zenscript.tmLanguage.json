{
  "name": "ZenScript",
  "scopeName": "source.zenscript",
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "patterns": [
    { "include": "#preprocessor" },
    { "include": "#import" },
    { "include": "#brackethandlers" },
    { "include": "#keywords" },
    { "include": "#comments" },
    { "include": "#operators" },
    { "include": "#functions" },
    { "include": "#function-call" },
    { "include": "#dots" },
    { "include": "#var" },
    { "include": "#static" },
    { "include": "#global" },
    { "include": "#string" },
    { "include": "#values" },
    { "include": "#constants" }
  ],
  "repository": {
    "preprocessor": {
      "name": "support.other.preprocessor.zenscript",
      "match": "^(\\s*)(#)(debug|ignoreBracketErrors|norun|loader|priority|ikwid|profile|modloaded)"
    },
    "import": {
      "comment": "package import",
      "name": "meta.import.zenscript",
      "begin": "\\b(import)\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.import.zenscript"
        }
      },
      "end": "\\s*(;)",
      "endCaptures": {
        "1": {
          "name": "keyword.operator"
        }
      },
      "patterns": [
        {
          "name": "support.class",
          "match": "\\b\\w+\\b"
        }
      ]
    },
    "brackethandlers": {
      "name": "variable.language.brackethandler.zenscript",
      "begin": "\\<(?=[^<>]+:)",
      "end": "\\>",
      "patterns": [
        {
          "name": "variable.parameter.brackethandler.zenscript",
          "match": "[^<>]+"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "comment": "control keywords",
          "name": "keyword.control.zenscript",
          "match": "\\b(void|version|for|return|while|break)\\b"
        },
        {
          "comment": "storage keywords",
          "name": "constant.other.type.zenscript",
          "match": "\\b(any|bool|byte|short|int|long|float|double|string)\\b"
        },
        {
          "comment": "as holder keywords",
          "name": "constant.other.type.zenscript",
          "match": "\\b(?<=(\\sas\\s)|(\\sinstanceof\\s))[a-zA-Z_]+\\b(?!\\.)"
        },
        {
          "comment": "as holder keywords",
          "name": "meta.type.zenscript",
          "match": "\\b(?<=(\\sas\\s)|(\\sinstanceof\\s))(([a-zA-Z_]+\\.)+)(\\w+)\\b",
          "captures": {
            "3":{
              "name":"support.class"
            },
            "5": {
              "name": "constant.other.type.zenscript"
            }
          }
        },
        {
          "comment": "function keyword",
          "name": "storage.type.function.zenscript",
          "match": "\\b(function)\\b"
        },
        {
          "comment": "statement keywords",
          "name": "keyword.control.conditional.zenscript",
          "match": "\\b(if|else)\\b"
        },
        {
          "name": "keyword.other.class.zenscript",
          "match": "\\b(zenClass|frigginClass)\\b"
        },
        {
          "name": "keyword.other.class.constructor.zenscript",
          "match": "\\b(zenConstructor|frigginConstructor)\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.zenscript",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.line.zenscript",
          "begin": "//|#",
          "end": "$\\n?"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "comment": "math operators",
          "name": "keyword.operator",
          "match": "(\\.\\.|\\+=|\\+|-=|-|\\*=|\\*|\\/=|\\/|%=|%|\\|=|\\||\\|\\||&=|&&|&|\\^=|\\^|\\?|:|~=|~|;|<=|<|>=|>|==|=|!=|!|\\$)"
        },
        {
          "comment": "other operators",
          "name": "keyword.operator",
          "match": "\\b(in|has|as|instanceof)\\b"
        }
      ]
    },
    "functions": {
      "comment": "functions",
      "name": "meta.function.zenscript",
      "match": "(?<=function\\s)([A-Za-z_$][\\w$]*)\\s*(?=\\()",
      "captures": {
        "1": {
          "name": "entity.name.function.zenscript"
        }
      }
    },
    "function-call": {
      "comment": "function calls",
      "name": "meta.function-call.zenscript",
      "match": "(?<!function\\s)([A-Za-z_$][\\w$]*)\\s*(?=\\()",
      "captures": {
        "1": {
          "name": "entity.name.function.zenscript"
        }
      }
    },
    "dots": {
      "comment": "dots",
      "name": "keyword.operator.dot",
      "match": "(\\.)(?!\\w*[0-9(])"
    },
    "var": {
      "comment": "var",
      "match": "\\b(var|val)\\b",
      "name": "storage.type.var"
    },
    "static": {
      "comment": "static",
      "match": "\\b(static)\\b",
      "name": "storage.modifier.static"
    },
    "global": {
      "comment": "global",
      "match": "\\b(global)\\b",
      "name": "storage.modifier.global"
    },
    "string": {
      "patterns": [
        {
          "name": "string.quoted.double.zenscript",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.unicode.zenscript",
              "match": "(\\\\u)([0-9A-Fa-f]{4})",
              "captures": {
                "1": {
                  "name": "keyword.operator"
                },
                "2":{
                  "name": "constant.character.escape.unicode.zenscript"
                }
              }
            },
            {
              "name": "constant.character.escape.zenscript",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.zenscript",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.unicode.zenscript",
              "match": "\\\\u[0-9A-F]{4}"
            },
            {
              "name": "constant.character.escape.zenscript",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "values": {
      "patterns": [
        {
          "name": "constant.numeric.integer.zenscript",
          "match": "\\b(?<!\\.)(-?([0-9]+))(?!\\.)\\b"
        },
        {
          "name": "constant.numeric.hexadecimal_integer.zenscript",
          "match": "\\b(?<!\\.)(-?0[Xx][A-Fa-f0-9]+)(?!\\.)\\b"
        },
        {
          "name": "constant.numeric.float.zenscript",
          "match": "\\b-?([0-9]+)\\.[0-9]+([eE][+-]?[0-9]+)?[fFdD]?\\b"
        }
      ]
    },
    "constants": {
      "comment": "constants (true, false, null)",
      "name": "constant.language.zenscript",
      "match": "\\b(true|false|null)\\b"
    }
  }
}
